box:
  id: ghcr.io/ymd-stella/openvslam-community/openvslam-ros:latest

no-response-timeout: 20

clang_format:
  steps:
    - script:
      name: apply clang-format
      code: |
        DIRS_TO_EXCLUDE=".git 3rd cmake build .idea cmake-build-debug cmake-build-release"
        for DIR in ${DIRS_TO_EXCLUDE}; do
          EXCLUDE_CMD="${EXCLUDE_CMD} -type d -name ${DIR} -prune -o"
        done
        FILES=$(find . ${EXCLUDE_CMD} -type f -regex ".*\.\(c\|h\|cc\|hh\|cpp\|hpp\)" -print)
        for FILE in ${FILES}; do
          RET=$(diff ${FILE} <(clang-format-6.0 -style=file ${FILE}) 2>&1 || true)
          if [ -n "${RET}" ]; then
            FILES_TO_FORMAT="${FILES_TO_FORMAT} ${FILE}"
          fi
        done
    - script:
      name: check clang-format necessity
      code: |
        if [ -n "${FILES_TO_FORMAT}" ]; then
          echo "Please apply clang-format to following files:"
          for FILE in ${FILES_TO_FORMAT}; do echo "* ${FILE}"; done
          exit 1
        fi
        echo "There is no file which needs clang-format"

build:
  steps:
    - script:
      name: setup ccache
      code: |
        export CCACHE_DIR=${WERCKER_CACHE_DIR}/.ccache
        ccache -M 950M
        ccache -s
    - script:
      name: install openvslam
      code: |
        git clone --depth 1 https://github.com/OpenVSLAM-Community/openvslam.git
        cd openvslam
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Debug -DBUILD_WITH_MARCH_NATIVE=OFF -DUSE_PANGOLIN_VIEWER=OFF -DUSE_SOCKET_PUBLISHER=OFF -DUSE_STACK_TRACE_LOGGER=ON -DBOW_FRAMEWORK=DBoW2 -DBUILD_TESTS=ON -DUSE_SSE_ORB=ON ..
        make -j $(($(nproc) / 2))
        make install
        cd ../../
    - script:
      name: build ros packages
      code: |
        mkdir -p ../ros_ws/src
        cp -r . ../ros_ws/src/openvslam_ros
        cd ../ros_ws
        source /opt/ros/${ROS_DISTRO}/setup.bash
        catkin_make -j$(($(nproc) / 2)) -DBUILD_WITH_MARCH_NATIVE=OFF -DUSE_PANGOLIN_VIEWER=OFF -DUSE_SOCKET_PUBLISHER=OFF -DUSE_STACK_TRACE_LOGGER=ON -DBOW_FRAMEWORK=DBoW2
    - script:
      name: run run_slam
      code: |
        source ../ros_ws/devel/setup.bash
        roscore&
        rosrun tf2_ros static_transform_publisher 0 0 0 0 0 0 odom base_link&
        rosrun tf2_ros static_transform_publisher 0 0 0 0 0 0 base_link cam0&
        rosrun openvslam_ros run_slam -v /datasets/orb_vocab/orb_vocab.dbow2 -c openvslam/example/euroc/EuRoC_mono.yaml --map-db map.msg /camera/image_raw:=/cam0/image_raw&
        rosbag play /datasets/EuRoC/MH_04_difficult.bag
        pkill -SIGINT -f run_slam
        pkill -SIGINT -f static_transform_publisher
        pkill -SIGINT roscore
    - script:
      name: run run_localization
      code: |
        source ../ros_ws/devel/setup.bash
        roscore&
        rosrun tf2_ros static_transform_publisher 0 0 0 0 0 0 odom base_link&
        rosrun tf2_ros static_transform_publisher 0 0 0 0 0 0 base_link cam0&
        rosrun openvslam_ros run_localization -v /datasets/orb_vocab/orb_vocab.dbow2 -c openvslam/example/euroc/EuRoC_mono.yaml --map-db map.msg /camera/image_raw:=/cam0/image_raw&
        sleep 5
        rosbag play /datasets/EuRoC/MH_04_difficult.bag
        pkill -SIGINT -f run_localization
        pkill -SIGINT -f static_transform_publisher
        pkill -SIGINT roscore
